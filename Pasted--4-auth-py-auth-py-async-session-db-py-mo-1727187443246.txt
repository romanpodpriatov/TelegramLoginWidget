Шаг 4: Обновите auth.py
Теперь обновим auth.py, чтобы импортировать async_session из db.py вместо models.py.

python
Копировать код
# auth.py
from quart import Blueprint, render_template, redirect, url_for, request
from quart_auth import login_user, logout_user, login_required, current_user
from models import User
from sqlalchemy.future import select
from db import async_session  # Импорт из db.py

auth = Blueprint('auth', __name__)

@auth.route('/login', methods=['GET', 'POST'])
async def login():
    if request.method == 'POST':
        data = await request.form
        username = data.get('username')
        password = data.get('password')
        async with async_session() as session:
            result = await session.execute(select(User).where(User.username == username))
            user = result.scalar_one_or_none()
            if user and user.verify_password(password):
                await login_user(user)
                return redirect(url_for('index'))
        return await render_template('auth/login.html', error="Invalid credentials")
    return await render_template('auth/login.html')

@auth.route('/logout')
@login_required
async def logout():
    await logout_user()
    return redirect(url_for('index'))
Пояснения:

Импорт async_session из db.py: Это устраняет необходимость импорта из models.py, что предотвращает циклические зависимости.
Шаг 5: Проверьте остальные части проекта
Убедитесь, что другие модули, такие как admin.py и любые другие blueprints или утилиты, также импортируют async_session из db.py.

Пример для admin.py:

python
Копировать код
# admin.py
from quart import Blueprint, render_template, redirect, url_for, request
from quart_auth import login_required, current_user
from models import Auction
from sqlalchemy.future import select
from db import async_session

admin = Blueprint('admin', __name__, url_prefix='/admin')

@admin.route('/auctions')
@login_required
async def manage_auctions():
    async with async_session() as session:
        result = await session.execute(select(Auction))
        auctions = result.scalars().all()
        return await render_template('admin/auctions.html', auctions=auctions)

# Добавьте другие маршруты для администрирования по мере необходимости
